{"version":3,"file":"index.esm.js","sources":["../src/Logger.js"],"sourcesContent":["const Levels = [\n  'trace',\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'fatal'\n];\n\nconst NAME_DELIMITER = ':';\n\nfunction isString (arg) {\n  return (arg?.constructor === String);\n}\n\nfunction isError (arg) {\n  return (arg instanceof Error);\n}\n\nexport default class Logger {\n  static includes = [];\n  static excludes = [];\n  static _level = 'info';\n\n  constructor (context = {}) {\n    if (isString(context)) {\n      context = {\n        name: context\n      };\n    }\n\n    if (!('name' in context)) {\n      throw new Error('Must specify name for logger');\n    }\n\n    this.context = context;\n    const {name} = context;\n    this.name = name;\n  }\n\n  static enabled ({level, name}) {\n    // check level first since its cheaper array index\n    // comparison than the name regex stuffs\n    return this.levelEnabled(level) && this.nameEnabled(name);\n  }\n\n  static levelEnabled (level) {\n    const level_index = Levels.indexOf(level);\n    const this_index = Levels.indexOf(this.level);\n    return level_index >= this_index;\n  }\n\n  static nameEnabled (name) {\n    // TODO: probably can assume this happens only once\n    // before run so we can then memoize on name?\n    if (name === '*') {\n      return true;\n    }\n\n    for (const exclude of this.excludes) {\n      if (exclude.test(name)) {\n        return false;\n      }\n    }\n\n    return this.includes.some((include)=> {\n      return include.test(name);\n    });\n  }\n\n  static get level () {\n    return this._level;\n  }\n\n  static set level (level) {\n    const valid_level = Levels.includes(level);\n    if (!valid_level) {\n      throw new Error(`Invalid level ${level}`);\n    }\n    this._level = level;\n  }\n\n  static set names (names) {\n    if (!Array.isArray(names)) {\n      if (isString(names)) {\n        names = names.split(/[\\s,]+/);\n      } else {\n        throw new Error('setNames expects string or array or strings');\n      }\n    }\n\n    for (let name of names) {\n      name = name.replace(/\\*/g, '.*?');\n      const exclude = (name[0] === '-');\n      let dest = 'includes';\n      if (exclude) {\n        name = name.substr(1);\n        dest = 'excludes';\n      }\n      const regex = new RegExp(`^${name}$`);\n      this[dest].push(regex);\n    }\n  }\n\n  child (context = {}) {\n    let {name} = this.context;\n    if ('name' in context) {\n      name = [name, context.name].join(NAME_DELIMITER);\n    }\n    const new_context = {...this.context, ...context, name};\n    const child = new this.constructor(new_context);\n    child.level = this.level;\n    return child;\n  }\n\n  _log (...args) {\n    let body = {...this.context};\n\n    // DERP: Should probably just limit to two args\n    // but oh well i'm a fucken idiot\n    for (const arg of args) {\n      const has_message = ('message' in body);\n      if (isString(arg)) {\n        if (!has_message) {\n          body.message = arg;\n        }\n      } else if (isError(arg)) {\n        body.error = arg;\n        if (!has_message) {\n          body.message = arg.message;\n        }\n      } else if (arg) {\n        body = {...body, ...arg};\n      }\n    }\n\n    return body;\n  }\n}\n\nLevels.forEach((level)=> {\n  const {console} = global;\n  const fn = (level === 'fatal') ? 'error' : level;\n  Logger.prototype[level] = function log (...args) {\n    const body = this._log(...args);\n    const {message, name} = body;\n    const enabled = Logger.enabled({level, name});\n    if (enabled) {\n      console[fn](message, body);\n    }\n  };\n  Levels[level] = level;\n});\n\nLogger.levels = Levels;\n"],"names":["Levels","NAME_DELIMITER","isString","arg","constructor","String","isError","Error","Logger","context","name","enabled","level","levelEnabled","nameEnabled","level_index","indexOf","this_index","exclude","excludes","test","includes","some","include","_level","valid_level","names","Array","isArray","split","replace","dest","substr","regex","RegExp","push","child","join","new_context","_log","args","body","has_message","message","error","forEach","console","global","fn","prototype","log","levels"],"mappings":"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"}