{"version":3,"file":"index.umd.js","sources":["../src/Logger.js"],"sourcesContent":["const Levels = [\n  'trace',\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'fatal'\n];\n\nconst NAME_DELIMITER = ':';\n\nfunction isString (arg) {\n  return (arg?.constructor === String);\n}\n\nfunction isError (arg) {\n  return (arg instanceof Error);\n}\n\nexport default class Logger {\n  static includes = [];\n  static excludes = [];\n  static _level = 'info';\n\n  constructor (context = {}) {\n    this.context = context;\n    if (!('name' in context)) {\n      throw new Error('Must specify name for logger');\n    }\n    const {name} = context;\n    this.name = name;\n    this.names = name.split(NAME_DELIMITER);\n  }\n\n  static enabled ({level, name}) {\n    // check level first since its cheaper array index\n    // comparison than the name regex stuffs\n    return this.levelEnabled(level) && this.nameEnabled(name);\n  }\n\n  static levelEnabled (level) {\n    const level_index = Levels.indexOf(level);\n    const this_index = Levels.indexOf(this.level);\n    return level_index >= this_index;\n  }\n\n  static nameEnabled (name) {\n    // TODO: probably can assume this happens only once\n    // before run so we can then memoize on name?\n    if (name === '*') {\n      return true;\n    }\n\n    for (const exclude of this.excludes) {\n      if (exclude.test(name)) {\n        return false;\n      }\n    }\n\n    return this.includes.some((include)=> {\n      return include.test(name);\n    });\n  }\n\n  static get level () {\n    return this._level;\n  }\n\n  static set level (level) {\n    const valid_level = Levels.includes(level);\n    if (!valid_level) {\n      throw new Error(`Invalid level ${level}`);\n    }\n    this._level = level;\n  }\n\n  static set names (names) {\n    if (!Array.isArray(names)) {\n      if (isString(names)) {\n        names = names.split(/[\\s,]+/);\n      } else {\n        throw new Error('setNames expects string or array or strings');\n      }\n    }\n\n    for (let name of names) {\n      name = name.replace(/\\*/g, '.*?');\n      const exclude = (name[0] === '-');\n      let dest = 'includes';\n      if (exclude) {\n        name = name.substr(1);\n        dest = 'excludes';\n      }\n      const regex = new RegExp(`^${name}$`);\n      this[dest].push(regex);\n    }\n  }\n\n  child (context = {}) {\n    let {name} = this.context;\n    if ('name' in context) {\n      name = [name, context.name].join(NAME_DELIMITER);\n    }\n    const new_context = {...this.context, ...context, name};\n    const child = new this.constructor(new_context);\n    child.level = this.level;\n    return child;\n  }\n\n  _log (...args) {\n    let body = {...this.context};\n\n    // DERP: Should probably just limit to two args\n    // but oh well i'm a fucken idiot\n    for (const arg of args) {\n      const has_message = ('message' in body);\n      if (isString(arg)) {\n        if (!has_message) {\n          body.message = arg;\n        }\n      } else if (isError(arg)) {\n        body.error = arg;\n        if (!has_message) {\n          body.message = arg.message;\n        }\n      } else if (arg) {\n        body = {...body, ...arg};\n      }\n    }\n\n    return body;\n  }\n}\n\nLevels.forEach((level)=> {\n  const {console} = global;\n  const fn = (level === 'fatal') ? 'error' : level;\n  Logger.prototype[level] = function log (...args) {\n    const body = this._log(...args);\n    const {message, name} = body;\n    const enabled = Logger.enabled({level, name});\n    if (enabled) {\n      console[fn](message, body);\n    }\n  };\n  Levels[level] = level;\n});\n\nLogger.levels = Levels;\n"],"names":["Levels","NAME_DELIMITER","isString","arg","constructor","String","isError","Error","Logger","context","name","names","split","enabled","level","levelEnabled","nameEnabled","level_index","indexOf","this_index","exclude","excludes","test","includes","some","include","_level","valid_level","Array","isArray","replace","dest","substr","regex","RegExp","push","child","join","new_context","_log","args","body","has_message","message","error","forEach","console","global","fn","prototype","log","levels"],"mappings":"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"}